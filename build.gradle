plugins {
    id "java" apply true
    id "scala"
    id 'antlr' apply true
}

group 'rk'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.5"
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.12.1'
    compile group: 'org.scala-lang', name: 'scala-reflect', version: '2.12.1'

    compile group: 'org.antlr', name: 'stringtemplate', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    compile group: 'org.mdkt.compiler', name: 'InMemoryJavaCompiler', version: '1.2'
}

generateGrammarSource {
    arguments += ['-visitor']
}

jar {
    archiveName = 'gclc.jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task compileGraphL (type: JavaExec) {
    workingDir = file('gclc')
    def buildDir = "${workingDir}/generated"

    classpath = sourceSets.main.runtimeClasspath

    main = 'Compiler'

    if(myargs)
    args(myargs)

    def genDir ="${buildDir}/graph"
    def file = file(genDir)
    file.mkdirs()
    standardOutput = new FileOutputStream("${genDir}/${myargs}.scala")
}

task compileScalaGraphL (type: ScalaCompile){
    dependsOn += [compileScala, compileGraphL]

    source = fileTree(dir: 'gclc/generated/graph')

    classpath = sourceSets.main.runtimeClasspath

    destinationDir = file("gclc/generated/scala")

    scalaCompileOptions.incrementalOptions.analysisFile = file('gclc/generated/scala/analiz')
}

task runGraphL (type: JavaExec){
    dependsOn += [compileScalaGraphL]

    def scalaCompileDir = "gclc/generated/scala"
    main = myargs

    classpath =sourceSets.main.runtimeClasspath + files(scalaCompileDir)
}